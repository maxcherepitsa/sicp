#lang racket
; Напишите процедуру, вычисляющую элементы треугольника Паскаля с помощью рекурсивного процесса.

(define (pascal-triangle-element row col)
  (cond ((> col row) 0) ;если номер колонки больше номера ряда, то отдаем 0 (номер ряда совпадает с количеством элементов в нем). То есть проверяем выпрыгивание из треугольника "вправо")
        ((< col 0) 0)   ;если номер колонки меньше 0, тоже 0 (то есть проверяем выпрыгивание "влево")
        ((= col 1) 1)   ;если номер колонки 1 = отдаем 1 (в первой колонке всегда 1 в любом ряду)
        ((+ (pascal-triangle-element (- row 1) (- col 1))
            (pascal-triangle-element (- row 1) col)))))

; Проверка:
(pascal-triangle-element 1 1) ; 1
(pascal-triangle-element 2 1) ; 1
(pascal-triangle-element 2 2) ; 1
(pascal-triangle-element 3 1) ; 1
(pascal-triangle-element 3 2) ; 2
(pascal-triangle-element 3 3) ; 1

; Более "юзерфрендли" было бы решение, которое отдает ошибку, что нету такого элемента в духе ответить
; (pascal-triangle-element 1 12930) строкой "Такого элемента нет".
; Но в текущем алгоритме "промах" по ближайшему к краю элементу помогает считать следующий ряд.